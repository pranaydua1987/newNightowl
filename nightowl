#! /usr/bin/env ruby
require 'yaml'
require 'watir-webdriver'
require 'test/unit'
require 'mysql2'
include Test::Unit::Assertions

@test_folder = File.expand_path(Dir.pwd)
$base_path = @test_folder
$data_path = "#{@test_folder}/src/bin/data/"
$page_object_path = "#{@test_folder}/src/pageObjects"
$test_path = "#{@test_folder}/tests"
$folder_path = "noPath"


arg_array = ARGV.to_a
if (arg_array.size) > 0
  if File.directory? (arg_array[0])
    @command = "folder"
    $folder_path = arg_array[0]
  elsif arg_array[0] != "--skip"
    @command = "run"
  else
      @command = arg_array[0]
      arg_array.shift
  end
end

@arg_array = arg_array
$error_log = Hash.new
$test_count = 0
$f_count = 0
$p_count = 0
@configfile = "#{@test_folder}/config.yaml"

def self.mysql_client(db_host,db_user,db_pass,db_name)
  $mysql_client = Mysql2::Client.new(
    host: db_host, username: db_user, password: db_pass, database: db_name
  )
end

def self.req_all_scripts
  Dir.glob("#{@test_folder}/src/pageObjects/**/*.rb") do |require_all|
    require_relative require_all
  end
end

def self.req_config(configfile)
  if (File.exist? (configfile)) == true then
    $config = YAML.load_file("#{configfile}")
  end
end

def self.req_all_data_files(filepath)
  if (File.exist? (filepath)) == true then
    $test_data = YAML.load_file("#{filepath}")
  end
end

req_all_scripts
req_config(@configfile)
# class Hautetest
  # def self.runner
      case @command
      when "--skip"
            Dir.glob("#{@test_folder}/tests/**/*.rb") do |rb_file|
              @rb_file_name = File.basename(rb_file,File.extname(rb_file))
              @yaml_path = rb_file.sub("#{@test_folder}/tests","")
              @yaml_path = @yaml_path.sub(".rb",".yaml")
              @yaml_path = "#{@test_folder}/src/bin/data#{@yaml_path}"
                if (@arg_array.include? @rb_file_name) == false
                  begin
                    puts "\n"
                    puts "\n"
                    puts "\e[36m Now running: #{rb_file} \e[0m"
                    req_all_data_files(@yaml_path)
                    start = Time.now()
                    load "#{rb_file}"
                    total = Time.now() - start
                    puts "\e[32mPASSED!, Execution Time #{total} \e[0m"
                  rescue Exception => e
                    if ($browser.nil? == false)
                      b_type = $browser.driver.browser
                      $browser.quit
                    end
                    puts "\e[1mBrowser: #{b_type} \e[0m"
                    puts "\e[1m#{$method}: \e[0m \e[31m FAILED! \e[0m"
                    puts "\e[1merror_message: \e[31m  #{e} \e[0m"
                    # $error = "yes"
                    $error_log[$method] = e
                    next
                end
            end
        end
      when "run"
          @arg_array.each do |rb_file|
          @rb_file_name = File.basename(rb_file,File.extname(rb_file))
          @yaml_path = rb_file.sub("tests","")
          @yaml_path = @yaml_path.sub(".rb",".yaml")
          @yaml_path = "#{@test_folder}/src/bin/data#{@yaml_path}"
              begin
                puts "\n"
                puts "\n"
                puts "\e[36m Now running: #{rb_file} \e[0m"
                req_all_data_files(@yaml_path)
                start = Time.now()
                load "#{@test_folder}/#{rb_file}"
                total = Time.now() - start
                puts "\e[32mPASSED!, Execution Time #{total} \e[0m"
              rescue Exception => e
                if ($browser.nil? == false)
                  b_type = $browser.driver.browser
                  $browser.quit
                end
                puts "\e[1mBrowser: #{b_type} \e[0m"
                puts "\e[1m#{$method}: \e[0m \e[31m FAILED! \e[0m"
                puts "\e[1merror_message: \e[31m  #{e} \e[0m"
                # $error = "yes"
                $error_log[$method] = e

                next
              end
          end
      when "folder"
        Dir.glob("#{$folder_path}**/*.rb") do |rb_file|
        $test_count = $test_count + 1
        @rb_file_name = File.basename(rb_file,File.extname(rb_file))
        @yaml_path = rb_file.sub("#{@test_folder}/tests","")
        @yaml_path = @yaml_path.sub(".rb",".yaml")
        @yaml_path = "#{@test_folder}/src/bin/data#{@yaml_path}"
        begin
          # puts "\n"
          # puts "\n"
          # puts "\e[36m Now running: #{rb_file} \e[0m"
          req_all_data_files(@yaml_path)
          start = Time.now()
          # puts "#{rb_file}"
          begin
            load "#{rb_file}"
          rescue => e
            puts e
          end
          total = Time.now() - start
          # $stdout.flush
          print "\e[1m\e[32m.\e[0m"
          if $test_count == 100
            puts ""
          end
          # puts "\e[32m    PASSED!, Execution Time #{total} \e[0m"
          $p_count = $p_count + 1
          $error = "no"
        rescue Exception => e

          new_e = e.backtrace.join("\n")
            new_ee = new_e.split("'")
            $new_e = new_ee[2]

          print "\e[1m\e[31mF\e[0m"
          if ($browser.nil? == false)
            b_type = $browser.driver.browser
            $browser.quit
          end
          # puts "\e[1m    #{$method}: \e[0m \e[31m FAILED! \e[0m"
          # puts "\e[1m    error_message: \e[31m  #{e} \e[0m"
          $error = "yes"
          $error_log["#{$method} #{b_type} #{rb_file}"] = e
          # hash_count = hash_count + 1
          @command = nil
          $f_count = $f_count + 1
          next
        end
       end
      else
          Dir.glob("#{@test_folder}/tests/**/*.rb") do |rb_file|
          $test_count = $test_count + 1
          @rb_file_name = File.basename(rb_file,File.extname(rb_file))
          @yaml_path = rb_file.sub("#{@test_folder}/tests","")
          @yaml_path = @yaml_path.sub(".rb",".yaml")
          @yaml_path = "#{@test_folder}/src/bin/data#{@yaml_path}"
          begin
            # puts "\n"
            # puts "\n"
            # puts "\e[36m Now running: #{rb_file} \e[0m"
            req_all_data_files(@yaml_path)
            start = Time.now()
            # puts "#{rb_file}"
              load "#{rb_file}"
            total = Time.now() - start
            # $stdout.flush
            print "\e[1m\e[32m.\e[0m"
            if $test_count == 100
              puts ""
            end
            # puts "\e[32m    PASSED!, Execution Time #{total} \e[0m"
            $p_count = $p_count + 1
            $error = "no"
          rescue Exception => e

            new_e = e.backtrace.join("\n")
              new_ee = new_e.split("'")
              $new_e = new_ee[2]

            print "\e[1m\e[31mF\e[0m"
            if ($browser.nil? == false)
              b_type = $browser.driver.browser
              $browser.quit
            end
            # puts "\e[1m    #{$method}: \e[0m \e[31m FAILED! \e[0m"
            # puts "\e[1m    error_message: \e[31m  #{e} \e[0m"
            $error = "yes"
            $error_log["#{$method} #{b_type} #{rb_file}"] = e
            # hash_count = hash_count + 1
            @command = nil
            $f_count = $f_count + 1
            next
          end
        end
      end
  # end
# end
if $error == "yes"
  if @command == nil
    puts "\n"
    puts "\n"
    puts "\n"
    puts "\e[1m\e[33m Error Log: \e[0m"
    i = 1
    $error_log.each do |print_key,print_value|
      meth,brow,testcase = print_key.split(" ")
      puts "\n"
      puts "\e[1m #{i}) \e[0m"
      puts "\e[1m Test: #{testcase} \e[0m"
      puts "\e[1m Method: #{meth} \e[0m"
      puts "\e[1m Browser: #{brow} \e[0m"
      puts "\e[1m\e[31m #{print_value} \e[0m"
      print "\e[1m\e[31m #{$new_e} \e[0m"
      puts "\n"
      i = i + 1
    end
    puts "\n"
    puts "\e[1m Total Scenario : #{$test_count}. \e[1m \e[32m Passed: #{$p_count}. \e[1m \e[31m Failed: #{$f_count}. \e[0m"
    exit -1
  end
elsif  $error == "no"
  puts "\n"
  puts "\n"
  print "\e[1m Total Scenario : #{$test_count}. \e[0m"
  print "\e[1m \e[32m Passed: #{$p_count}. \e[0m "
  puts "\n"
  puts "\n"
  exit 0
end

# runner
